# grades.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

from database.db import db
from config import SUBJECTS
from localization.kz_text import GRADES_MESSAGES, BUTTONS, GRADE_EMOJIS
from modules.notifications import send_personal_notification
from modules.keyboards import get_student_keyboard, get_teacher_keyboard

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class GradeStates(StatesGroup):
    waiting_for_action = State()
    select_group = State()
    select_student = State()
    select_subject = State()
    input_grade = State()
    input_comment = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏
def get_grades_actions_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton(BUTTONS["my_grades"]))
    keyboard.row(KeyboardButton(BUTTONS["set_grade"]))
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
def get_subject_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [KeyboardButton(subject) for subject in SUBJECTS]
    keyboard.add(*buttons)
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏
def get_grade_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    keyboard.row(
        KeyboardButton("0"),
        KeyboardButton("25"),
        KeyboardButton("50"),
        KeyboardButton("75"),
        KeyboardButton("100")
    )
    keyboard.row(
        KeyboardButton("10"),
        KeyboardButton("30"),
        KeyboardButton("60"),
        KeyboardButton("80"),
        KeyboardButton("90")
    )
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
def format_grades(grades):
    if not grades:
        return GRADES_MESSAGES["no_grades"]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    subjects_grades = {}
    for grade_item in grades:
        subject = grade_item["subject"]
        if subject not in subjects_grades:
            subjects_grades[subject] = []
        subjects_grades[subject].append(grade_item)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    result = GRADES_MESSAGES["grades_title"] + "\n\n"
    
    for subject, grade_items in subjects_grades.items():
        result += f"üìö {subject}:\n"
        for item in sorted(grade_items, key=lambda x: x["date"], reverse=True):
            grade = item["grade"]
            date = item["date"]
            comment = item["comment"] or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
            grade_emoji = GRADE_EMOJIS["unknown"]
            if grade >= 90:
                grade_emoji = GRADE_EMOJIS["excellent"]
            elif grade >= 75:
                grade_emoji = GRADE_EMOJIS["good"]
            elif grade >= 50:
                grade_emoji = GRADE_EMOJIS["satisfactory"]
            elif grade >= 25:
                grade_emoji = GRADE_EMOJIS["poor"]
            else:
                grade_emoji = GRADE_EMOJIS["very_poor"]
            
            result += f"{grade_emoji} {date}: {grade} “±–ø–∞–π"
            if comment:
                result += f" ({comment})"
            result += "\n"
        result += "\n"
    
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–æ–∫, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
def format_teacher_grades(grades, max_grades_per_student=3):
    if not grades:
        return GRADES_MESSAGES["no_grades_set"]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    groups_students = {}
    for grade_item in grades:
        group_code = grade_item["group_code"]
        student_name = grade_item["full_name"]
        student_id = grade_item["student_id"]
        
        if group_code not in groups_students:
            groups_students[group_code] = {}
        
        if student_id not in groups_students[group_code]:
            groups_students[group_code][student_id] = {
                "name": student_name,
                "grades": []
            }
        
        groups_students[group_code][student_id]["grades"].append({
            "subject": grade_item["subject"],
            "grade": grade_item["grade"],
            "date": grade_item["date"],
            "comment": grade_item["comment"]
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    result = GRADES_MESSAGES["teacher_grades_title"] + "\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    for group_code in sorted(groups_students.keys()):
        result += f"üìÅ –¢–æ–ø: {group_code}\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        students = groups_students[group_code]
        for student_id in sorted(students.keys(), key=lambda sid: students[sid]["name"]):
            student_data = students[student_id]
            result += f"üë§ {student_data['name']}:\n"
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_grades = sorted(student_data["grades"], key=lambda g: g["date"], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ü–µ–Ω–æ–∫
            for i, grade in enumerate(all_grades[:max_grades_per_student]):
                subject = grade["subject"]
                grade_value = grade["grade"]
                date = grade["date"]
                comment = grade["comment"] or ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
                grade_emoji = GRADE_EMOJIS["unknown"]
                if grade_value >= 90:
                    grade_emoji = GRADE_EMOJIS["excellent"]
                elif grade_value >= 75:
                    grade_emoji = GRADE_EMOJIS["good"]
                elif grade_value >= 50:
                    grade_emoji = GRADE_EMOJIS["satisfactory"]
                elif grade_value >= 25:
                    grade_emoji = GRADE_EMOJIS["poor"]
                else:
                    grade_emoji = GRADE_EMOJIS["very_poor"]
                
                result += f" {grade_emoji} {subject}, {date}: {grade_value} “±–ø–∞–π"
                if comment:
                    result += f" ({comment})"
                result += "\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ—Ü–µ–Ω–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â–µ –æ—Å—Ç–∞–ª–æ—Å—å
            if len(all_grades) > max_grades_per_student:
                result += f" ... –∂”ô–Ω–µ —Ç–∞“ì—ã {len(all_grades) - max_grades_per_student} –±–∞“ì–∞\n"
            
            result += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ –ø–æ–∫–∞–∑–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫
    result += f"\n{GRADES_MESSAGES['last_grades_shown'].format(count=max_grades_per_student)}"
    
    return result

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grades
async def cmd_grades(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    
    if not user or user["status"] != "approved":
        await message.answer(GRADES_MESSAGES["not_registered"])
        return
    
    # –†–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user["role"] == "student":
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –æ—Ü–µ–Ω–∫–∏
        grades = await db.get_student_grades(message.from_user.id)
        await message.answer(format_grades(grades))
        
    elif user["role"] == "teacher":
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        await message.answer(
            GRADES_MESSAGES["choose_action"],
            reply_markup=get_grades_actions_keyboard()
        )
        await GradeStates.waiting_for_action.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ü–µ–Ω–∫–∞–º–∏
async def process_grades_action(message: types.Message, state: FSMContext):
    action = message.text.lower()
    
    if action == BUTTONS["cancel"].lower():
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(GRADES_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    if action == BUTTONS["my_grades"].lower():
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –≤—ã—Å—Ç–∞–≤–∏–ª —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        keyboard = get_teacher_keyboard()
        teacher_grades = await db.get_teacher_grades(message.from_user.id)
        await message.answer(format_teacher_grades(teacher_grades), reply_markup=keyboard)
        await state.finish()
        
    elif action == BUTTONS["set_grade"].lower():
        user = await db.get_user(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        groups = await db.get_groups()
        teacher_groups = [group for group in groups if group["teacher_telegram_id"] == message.from_user.id]
        
        if not teacher_groups:
            keyboard = get_teacher_keyboard()
            await message.answer(
                GRADES_MESSAGES["no_assigned_groups"],
                reply_markup=keyboard
            )
            await state.finish()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for group in teacher_groups:
            keyboard.add(KeyboardButton(group["group_code"]))
        keyboard.add(KeyboardButton(BUTTONS["cancel"]))
        
        await message.answer(
            GRADES_MESSAGES["choose_group_grades"],
            reply_markup=keyboard
        )
        await GradeStates.select_group.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
async def process_select_group(message: types.Message, state: FSMContext):
    group_code = message.text.strip()
    
    if group_code.lower() == BUTTONS["cancel"].lower():
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(GRADES_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    groups = await db.get_groups()
    if not any(group["group_code"] == group_code for group in groups):
        await message.answer(f"–¢–æ–ø {group_code} —Ç–∞–±—ã–ª–º–∞–¥—ã. –¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–æ–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    students = await db.get_students_by_group(group_code)
    
    if not students:
        keyboard = get_teacher_keyboard()
        await message.answer(
            GRADES_MESSAGES["no_students_group"].format(group_code=group_code),
            reply_markup=keyboard
        )
        await state.finish()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    for student in students:
        button_text = f"{student['full_name']}"
        callback_data = f"grade_student_{student['telegram_id']}"
        keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_code=group_code)
    
    await message.answer(
        GRADES_MESSAGES["choose_student_grade"],
        reply_markup=keyboard
    )
    await GradeStates.select_student.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
async def process_select_student(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback_data
    student_id = int(callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    student = await db.get_user(student_id)
    
    if not student or student["role"] != "student" or student["status"] != "approved":
        await callback_query.answer(GRADES_MESSAGES["student_not_found"])
        await state.finish()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
    await state.update_data(student_id=student_id, student_name=student["full_name"])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    await callback_query.message.answer(
        GRADES_MESSAGES["student_selected"].format(student_name=student['full_name']),
        reply_markup=get_subject_keyboard()
    )
    
    await GradeStates.select_subject.set()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
async def process_select_subject(message: types.Message, state: FSMContext):
    subject = message.text
    
    if subject.lower() == BUTTONS["cancel"].lower():
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(GRADES_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    if subject not in SUBJECTS:
        await message.answer(
            "–¢—ñ–∑—ñ–º–Ω–µ–Ω –ø”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_subject_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    await state.update_data(subject=subject)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
    await message.answer(
        GRADES_MESSAGES["choose_grade"],
        reply_markup=get_grade_keyboard()
    )
    await GradeStates.input_grade.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏
async def process_input_grade(message: types.Message, state: FSMContext):
    try:
        grade = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫ (–æ—Ç 0 –¥–æ 100)
        if grade < 0 or grade > 100:
            raise ValueError("Grade out of range")
    except ValueError:
        if message.text.lower() == BUTTONS["cancel"].lower():
            keyboard = get_teacher_keyboard()
            await state.finish()
            await message.answer(GRADES_MESSAGES["action_cancelled"], reply_markup=keyboard)
            return
        
        await message.answer(
            GRADES_MESSAGES["invalid_grade"],
            reply_markup=get_grade_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
    await state.update_data(grade=grade)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await message.answer(
        GRADES_MESSAGES["enter_comment"],
        reply_markup=types.ReplyKeyboardRemove()
    )
    await GradeStates.input_comment.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ü–µ–Ω–∫–µ
async def process_input_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    
    if comment.lower() == BUTTONS["cancel"].lower():
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(GRADES_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "-", —Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç
    if comment == "-":
        comment = None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    student_id = data["student_id"]
    student_name = data["student_name"]
    subject = data["subject"]
    grade = data["grade"]
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    today = datetime.now().strftime("%d.%m.%Y")
    
    # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
    await db.add_grade(student_id, subject, today, grade, comment)
    
    keyboard = get_teacher_keyboard()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    await message.answer(
        GRADES_MESSAGES["grade_set"].format(
            student_name=student_name,
            subject=subject,
            date=today,
            grade=grade
        ) + (f"\n–¢“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ: {comment}" if comment else ""),
        reply_markup=keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    notification_text = GRADES_MESSAGES["grade_notification"].format(
        subject=subject,
        date=today,
        grade=grade
    ) + (f"\n–¢“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ: {comment}" if comment else "")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–∏–ø–æ–º "grade"
    notification_sent = await send_personal_notification(
        message.bot,
        student_id,
        notification_text,
        notification_type="grade"
    )
    
    if not notification_sent:
        await message.answer(GRADES_MESSAGES["notification_failed"])
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.register_message_handler(cmd_grades, commands=["grades"], state="*")
    dp.register_message_handler(process_grades_action, state=GradeStates.waiting_for_action)
    dp.register_message_handler(process_select_group, state=GradeStates.select_group)
    dp.register_callback_query_handler(
        process_select_student,
        lambda c: c.data.startswith("grade_student_"),
        state=GradeStates.select_student
    )
    dp.register_message_handler(process_select_subject, state=GradeStates.select_subject)
    dp.register_message_handler(process_input_grade, state=GradeStates.input_grade)
    dp.register_message_handler(process_input_comment, state=GradeStates.input_comment)
