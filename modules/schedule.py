from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiosqlite

from database.db import db
from config import WEEKDAYS, SUBJECTS
from modules.notifications import send_schedule_notification

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ScheduleStates(StatesGroup):
    waiting_for_action = State()
    selecting_group = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    add_schedule_weekday = State()
    add_schedule_time = State()
    add_schedule_subject = State()
    edit_schedule_item = State()
    edit_schedule_weekday = State()
    edit_schedule_time = State()
    edit_schedule_subject = State()
    confirm_schedule_change = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
def get_schedule_actions_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    keyboard.row(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ"), KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_weekday_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(day) for day in WEEKDAYS]
    keyboard.add(*buttons)
    keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
def get_subject_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [KeyboardButton(subject) for subject in SUBJECTS]
    keyboard.add(*buttons)
    keyboard.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def get_confirm_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(schedule_items):
    if not schedule_items:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    weekday_schedule = {}
    for item in schedule_items:
        weekday = item["weekday"]
        if weekday not in weekday_schedule:
            weekday_schedule[weekday] = []
        weekday_schedule[weekday].append(item)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekday_order = {day: i for i, day in enumerate(WEEKDAYS)}
    sorted_weekdays = sorted(weekday_schedule.keys(), key=lambda d: weekday_order.get(d, 999))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    result = "üìö –†–ê–°–ü–ò–°–ê–ù–ò–ï:\n\n"
    for weekday in sorted_weekdays:
        result += f"üìÜ {weekday}:\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        day_items = sorted(weekday_schedule[weekday], key=lambda x: x["time"])
        for item in day_items:
            result += f"‚è∞ {item['time']} - {item['subject']}\n"
        result += "\n"
    
    return result

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
async def cmd_schedule(message: types.Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    
    if not user or user["status"] != "approved":
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        return
    
    if user["role"] == "student":
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –≥—Ä—É–ø–ø—ã
        group_code = user["group_code"]
        schedule_items = await db.get_schedule(group_code)
        
        if not schedule_items:
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code} –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.")
        else:
            await message.answer(format_schedule(schedule_items))
    
    elif user["role"] in ["teacher", "admin"]:
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
            reply_markup=get_schedule_actions_keyboard()
        )
        await ScheduleStates.waiting_for_action.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async def process_schedule_action(message: types.Message, state: FSMContext):
    action = message.text.lower()
    
    if action == "–æ—Ç–º–µ–Ω–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from modules.keyboards import get_teacher_keyboard, get_admin_keyboard
        
        if user["role"] == "teacher":
            keyboard = get_teacher_keyboard()
        elif user["role"] == "admin":
            keyboard = get_admin_keyboard()
        else:
            keyboard = None
            
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await state.update_data(action=action)
    
    user = await db.get_user(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user["role"] == "teacher":
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        groups = await db.get_groups()
        available_groups = [group for group in groups if group["teacher_telegram_id"] == message.from_user.id]
        
        if not available_groups:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É.", 
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
            return
    else:  # –î–ª—è –∞–¥–º–∏–Ω–∞
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await db.get_groups()
        available_groups = groups
        
        if not available_groups:
            await message.answer(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.", 
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
            return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for group in available_groups:
        keyboard.add(KeyboardButton(group["group_code"]))
    keyboard.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
        reply_markup=keyboard
    )
    
    await ScheduleStates.selecting_group.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async def process_select_group(message: types.Message, state: FSMContext):
    group_code = message.text.strip()
    
    if group_code.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    groups = await db.get_groups()
    if not any(group["group_code"] == group_code for group in groups):
        await message.answer(f"–ì—Ä—É–ø–ø–∞ {group_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    await state.update_data(group_code=group_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    user_data = await state.get_data()
    action = user_data.get("action")
    
    if action == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule_items = await db.get_schedule(group_code)
        await message.answer(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code}:\n\n{format_schedule(schedule_items)}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
    
    elif action == "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=get_weekday_keyboard()
        )
        await ScheduleStates.add_schedule_weekday.set()
    
    elif action == "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule_items = await db.get_schedule(group_code)
        
        if not schedule_items:
            await message.answer(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code} –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.", 
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        for item in schedule_items:
            button_text = f"{item['weekday']} {item['time']} - {item['subject']}"
            callback_data = f"edit_schedule_{item['id']}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        await ScheduleStates.edit_schedule_item.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async def process_add_schedule_weekday(message: types.Message, state: FSMContext):
    weekday = message.text
    
    if weekday.lower() == "–æ—Ç–º–µ–Ω–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from modules.keyboards import get_teacher_keyboard, get_admin_keyboard
        
        if user["role"] == "teacher":
            keyboard = get_teacher_keyboard()
        elif user["role"] == "admin":
            keyboard = get_admin_keyboard()
        else:
            keyboard = None
            
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        return
    
    if weekday not in WEEKDAYS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await state.update_data(weekday=weekday)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await ScheduleStates.add_schedule_time.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async def process_add_schedule_time(message: types.Message, state: FSMContext):
    time = message.text.strip()
    
    if time.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if ":" not in time or len(time) < 4:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    await state.update_data(time=time)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=get_subject_keyboard()
    )
    await ScheduleStates.add_schedule_subject.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async def process_add_schedule_subject(message: types.Message, state: FSMContext):
    subject = message.text
    
    if subject.lower() == "–æ—Ç–º–µ–Ω–∞":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from modules.keyboards import get_teacher_keyboard, get_admin_keyboard
        
        if user["role"] == "teacher":
            keyboard = get_teacher_keyboard()
        elif user["role"] == "admin":
            keyboard = get_admin_keyboard()
        else:
            keyboard = None
            
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        return
    
    if subject not in SUBJECTS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
    await state.update_data(subject=subject)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_data = await state.get_data()
    weekday = user_data["weekday"]
    time = user_data["time"]
    group_code = user_data["group_code"]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ:\n"
        f"–ì—Ä—É–ø–ø–∞: {group_code}\n"
        f"–î–µ–Ω—å: {weekday}\n"
        f"–í—Ä–µ–º—è: {time}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=get_confirm_keyboard()
    )
    await ScheduleStates.confirm_schedule_change.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
async def process_confirm_schedule_change(message: types.Message, state: FSMContext):
    confirmation = message.text.lower()
    
    if confirmation != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from modules.keyboards import get_teacher_keyboard, get_admin_keyboard
        
        if user["role"] == "teacher":
            keyboard = get_teacher_keyboard()
        elif user["role"] == "admin":
            keyboard = get_admin_keyboard()
        else:
            keyboard = None
            
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_data = await state.get_data()
    weekday = user_data["weekday"]
    time = user_data["time"]
    subject = user_data["subject"]
    group_code = user_data["group_code"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_id = await db.add_schedule_item(group_code, weekday, time, subject)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã
    students_notified = await send_schedule_notification(
        message.bot, group_code, "add", weekday, time, subject
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from modules.keyboards import get_teacher_keyboard, get_admin_keyboard
    
    if user["role"] == "teacher":
        keyboard = get_teacher_keyboard()
    elif user["role"] == "admin":
        keyboard = get_admin_keyboard()
    else:
        keyboard = None
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    await message.answer(
        f"–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_code}.\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {students_notified} —Å—Ç—É–¥–µ–Ω—Ç–∞–º.",
        reply_markup=keyboard
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_edit_schedule_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ callback_data
    schedule_id = int(callback_query.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–Ω—è—Ç–∏—è –≤ FSM
    await state.update_data(schedule_id=schedule_id)
    
    await callback_query.answer()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=get_weekday_keyboard()
    )
    await ScheduleStates.edit_schedule_weekday.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
async def process_edit_schedule_weekday(message: types.Message, state: FSMContext):
    weekday = message.text
    
    if weekday.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    if weekday not in WEEKDAYS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await state.update_data(weekday=weekday)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await ScheduleStates.edit_schedule_time.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
async def process_edit_schedule_time(message: types.Message, state: FSMContext):
    time = message.text.strip()
    
    if time.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if ":" not in time or len(time) < 4:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
    await state.update_data(time=time)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç:",
        reply_markup=get_subject_keyboard()
    )
    await ScheduleStates.edit_schedule_subject.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
async def process_edit_schedule_subject(message: types.Message, state: FSMContext):
    subject = message.text
    
    if subject.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    if subject not in SUBJECTS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    await state.update_data(subject=subject)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_data = await state.get_data()
    schedule_id = user_data["schedule_id"]
    weekday = user_data["weekday"]
    time = user_data["time"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    async with aiosqlite.connect(db.db_path) as db_conn:
        db_conn.row_factory = aiosqlite.Row
        async with db_conn.execute(
            "SELECT * FROM schedule WHERE id = ?", (schedule_id,)
        ) as cursor:
            schedule_item = await cursor.fetchone()
            
    if not schedule_item:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return
    
    group_code = schedule_item["group_code"]
    await state.update_data(group_code=group_code)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code}:\n\n"
        f"–ë—ã–ª–æ: {schedule_item['weekday']}, {schedule_item['time']} - {schedule_item['subject']}\n\n"
        f"–°—Ç–∞–Ω–µ—Ç: {weekday}, {time} - {subject}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:",
        reply_markup=get_confirm_keyboard()
    )
    await ScheduleStates.confirm_schedule_change.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_confirm_edit(message: types.Message, state: FSMContext):
    confirmation = message.text.lower()
    
    if confirmation != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await state.finish()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_data = await state.get_data()
    schedule_id = user_data["schedule_id"]
    weekday = user_data["weekday"]
    time = user_data["time"]
    subject = user_data["subject"]
    group_code = user_data["group_code"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    success = await db.update_schedule_item(schedule_id, weekday, time, subject)
    
    if not success:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã
    students_notified = await send_schedule_notification(
        message.bot, group_code, "update", weekday, time, subject
    )
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await message.answer(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_code} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {students_notified} —Å—Ç—É–¥–µ–Ω—Ç–∞–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def process_delete_schedule_callback(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ callback_data
    schedule_id = int(callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    async with aiosqlite.connect(db.db_path) as db_conn:
        db_conn.row_factory = aiosqlite.Row
        async with db_conn.execute(
            "SELECT * FROM schedule WHERE id = ?", (schedule_id,)
        ) as cursor:
            schedule_item = await cursor.fetchone()
            
    if not schedule_item:
        await callback_query.answer("–û—à–∏–±–∫–∞: –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    success = await db.delete_schedule_item(schedule_id)
    
    if not success:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã
    group_code = schedule_item["group_code"]
    weekday = schedule_item["weekday"]
    time = schedule_item["time"]
    subject = schedule_item["subject"]
    
    students_notified = await send_schedule_notification(
        callback_query.bot, group_code, "delete", weekday, time, subject
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫—É
    await callback_query.message.edit_reply_markup(reply_markup=None)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer(f"–ó–∞–Ω—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ. –£–≤–µ–¥–æ–º–ª–µ–Ω—ã {students_notified} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await callback_query.message.answer(
        f"–ó–∞–Ω—è—Ç–∏–µ {weekday}, {time} - {subject} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_code}.\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {students_notified} —Å—Ç—É–¥–µ–Ω—Ç–∞–º."
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.register_message_handler(cmd_schedule, commands=["schedule"], state="*")
    dp.register_message_handler(process_schedule_action, state=ScheduleStates.waiting_for_action)
    dp.register_message_handler(process_select_group, state=ScheduleStates.selecting_group)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    dp.register_message_handler(process_add_schedule_weekday, state=ScheduleStates.add_schedule_weekday)
    dp.register_message_handler(process_add_schedule_time, state=ScheduleStates.add_schedule_time)
    dp.register_message_handler(process_add_schedule_subject, state=ScheduleStates.add_schedule_subject)
    dp.register_callback_query_handler(process_edit_schedule_callback, lambda c: c.data.startswith("edit_schedule_"), state=ScheduleStates.edit_schedule_item)
    dp.register_message_handler(process_edit_schedule_weekday, state=ScheduleStates.edit_schedule_weekday)
    dp.register_message_handler(process_edit_schedule_time, state=ScheduleStates.edit_schedule_time)
    dp.register_message_handler(process_edit_schedule_subject, state=ScheduleStates.edit_schedule_subject)
    dp.register_callback_query_handler(process_delete_schedule_callback, lambda c: c.data.startswith("delete_schedule_"))
    dp.register_message_handler(process_confirm_schedule_change, state=ScheduleStates.confirm_schedule_change)