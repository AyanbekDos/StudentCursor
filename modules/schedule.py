# schedule.py
import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiosqlite

from database.db import db
from config import WEEKDAYS, SUBJECTS
from localization.kz_text import SCHEDULE_MESSAGES, BUTTONS, SCHEDULE_NOTIFICATIONS
from modules.notifications import send_schedule_notification
from modules.keyboards import get_teacher_keyboard

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ScheduleStates(StatesGroup):
    waiting_for_action = State()
    selecting_group = State()
    add_schedule_weekday = State()
    add_schedule_time = State()
    add_schedule_subject = State()
    edit_schedule_item = State()
    edit_schedule_weekday = State()
    edit_schedule_time = State()
    edit_schedule_subject = State()
    confirm_schedule_change = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
def get_schedule_actions_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton(BUTTONS["view_schedule"]))
    keyboard.row(KeyboardButton(BUTTONS["add_lesson"]), KeyboardButton(BUTTONS["edit_schedule"]))
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_weekday_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(day) for day in WEEKDAYS]
    keyboard.add(*buttons)
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
def get_subject_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [KeyboardButton(subject) for subject in SUBJECTS]
    keyboard.add(*buttons)
    keyboard.row(KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def get_confirm_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(KeyboardButton(BUTTONS["confirm"]), KeyboardButton(BUTTONS["cancel"]))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(schedule_items):
    if not schedule_items:
        return SCHEDULE_MESSAGES["no_schedule"]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    weekday_schedule = {}
    for item in schedule_items:
        weekday = item["weekday"]
        if weekday not in weekday_schedule:
            weekday_schedule[weekday] = []
        weekday_schedule[weekday].append(item)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekday_order = {day: i for i, day in enumerate(WEEKDAYS)}
    sorted_weekdays = sorted(weekday_schedule.keys(), key=lambda d: weekday_order.get(d, 999))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    result = SCHEDULE_MESSAGES["schedule_title"] + "\n\n"
    
    for weekday in sorted_weekdays:
        result += f"üìÜ {weekday}:\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        day_items = sorted(weekday_schedule[weekday], key=lambda x: x["time"])
        for item in day_items:
            result += f"‚è∞ {item['time']} - {item['subject']}\n"
        result += "\n"
    
    return result

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
async def cmd_schedule(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /schedule –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user = await db.get_user(message.from_user.id)
    
    if not user or user["status"] != "approved":
        await message.answer(SCHEDULE_MESSAGES["not_registered"])
        return
    
    if user["role"] == "student":
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –≥—Ä—É–ø–ø—ã
        group_code = user["group_code"]
        schedule_items = await db.get_schedule(group_code)
        
        if not schedule_items:
            await message.answer(SCHEDULE_MESSAGES["no_schedule_created"].format(group_code=group_code))
        else:
            await message.answer(
                SCHEDULE_MESSAGES["schedule_for_group"].format(group_code=group_code) + 
                "\n\n" + format_schedule(schedule_items)
            )
    
    elif user["role"] == "teacher":
        # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        await message.answer(
            SCHEDULE_MESSAGES["choose_action"],
            reply_markup=get_schedule_actions_keyboard()
        )
        await ScheduleStates.waiting_for_action.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async def process_schedule_action(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {message.text}")
    action = message.text.lower()
    
    if action == BUTTONS["cancel"].lower():
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await state.update_data(action=action)
    
    user = await db.get_user(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    groups = await db.get_groups()
    available_groups = [group for group in groups if group["teacher_telegram_id"] == message.from_user.id]
    
    if not available_groups:
        await message.answer(
            SCHEDULE_MESSAGES["no_groups_assigned"],
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for group in available_groups:
        keyboard.add(KeyboardButton(group["group_code"]))
    keyboard.add(KeyboardButton(BUTTONS["cancel"]))
    
    await message.answer(
        SCHEDULE_MESSAGES["choose_group_schedule"],
        reply_markup=keyboard
    )
    await ScheduleStates.selecting_group.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
async def process_select_group(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {message.text}")
    group_code = message.text.strip()
    
    if group_code.lower() == BUTTONS["cancel"].lower():
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=types.ReplyKeyboardRemove())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    groups = await db.get_groups()
    if not any(group["group_code"] == group_code for group in groups):
        await message.answer(f"–¢–æ–ø {group_code} —Ç–∞–±—ã–ª–º–∞–¥—ã. –¢—ñ–∑—ñ–º–Ω–µ–Ω —Ç–æ–ø—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
    await state.update_data(group_code=group_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    user_data = await state.get_data()
    action = user_data.get("action")
    
    if action == BUTTONS["view_schedule"].lower():
        schedule_items = await db.get_schedule(group_code)
        await message.answer(
            SCHEDULE_MESSAGES["schedule_for_group"].format(group_code=group_code) + 
            "\n\n" + format_schedule(schedule_items),
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.finish()
        
    elif action == BUTTONS["add_lesson"].lower():
        await message.answer(
            SCHEDULE_MESSAGES["choose_weekday"],
            reply_markup=get_weekday_keyboard()
        )
        await ScheduleStates.add_schedule_weekday.set()
        
    elif action == BUTTONS["edit_schedule"].lower():
        schedule_items = await db.get_schedule(group_code)
        
        if not schedule_items:
            await message.answer(
                SCHEDULE_MESSAGES["no_schedule_created"].format(group_code=group_code),
                reply_markup=types.ReplyKeyboardRemove()
            )
            await state.finish()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(row_width=1)
        for item in schedule_items:
            button_text = f"{item['weekday']} {item['time']} - {item['subject']}"
            callback_data = f"edit_schedule_{item['id']}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        await message.answer(
            SCHEDULE_MESSAGES["choose_lesson_edit"],
            reply_markup=keyboard
        )
        await ScheduleStates.edit_schedule_item.set()

# –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–±–∞–∫–∞
async def process_add_weekday(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±—Ä–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {message.text}")
    
    if message.text.strip() == BUTTONS["cancel"]:
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    weekday = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    if weekday not in WEEKDAYS:
        await message.answer(
            "–¢—ñ–∑—ñ–º–Ω–µ–Ω –∞–ø—Ç–∞ –∫“Ø–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_weekday_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    await state.update_data(weekday=weekday)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
    await message.answer(
        SCHEDULE_MESSAGES["enter_time"],
        reply_markup=types.ReplyKeyboardRemove()
    )
    await ScheduleStates.add_schedule_time.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
async def process_add_time(message: types.Message, state: FSMContext):
    logger.info(f"–í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è: {message.text}")
    
    if message.text.strip() == BUTTONS["cancel"]:
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    time_str = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if ":" not in time_str or len(time_str.split(":")) != 2:
        await message.answer(SCHEDULE_MESSAGES["invalid_time"])
        return
    
    try:
        hours, minutes = time_str.split(":")
        hours = int(hours)
        minutes = int(minutes)
        
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("Invalid time range")
            
    except ValueError:
        await message.answer(SCHEDULE_MESSAGES["invalid_time"])
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    await state.update_data(time=time_str)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    await message.answer(
        SCHEDULE_MESSAGES["choose_subject"],
        reply_markup=get_subject_keyboard()
    )
    await ScheduleStates.add_schedule_subject.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
async def process_add_subject(message: types.Message, state: FSMContext):
    logger.info(f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {message.text}")
    
    if message.text.strip() == BUTTONS["cancel"]:
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    subject = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    if subject not in SUBJECTS:
        await message.answer(
            "–¢—ñ–∑—ñ–º–Ω–µ–Ω –ø”ô–Ω–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=get_subject_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    group_code = data["group_code"]
    weekday = data["weekday"]
    time = data["time"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        SCHEDULE_MESSAGES["confirm_add_lesson"].format(
            group_code=group_code,
            weekday=weekday,
            time=time,
            subject=subject
        ),
        reply_markup=get_confirm_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
    await state.update_data(subject=subject)
    await ScheduleStates.confirm_schedule_change.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞
async def process_confirm_add_lesson(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞: {message.text}")
    
    if message.text.strip() == BUTTONS["cancel"]:
        keyboard = get_teacher_keyboard()
        await state.finish()
        await message.answer(SCHEDULE_MESSAGES["action_cancelled"], reply_markup=keyboard)
        return
    
    if message.text.strip() == BUTTONS["confirm"]:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        group_code = data["group_code"]
        weekday = data["weekday"]
        time = data["time"]
        subject = data["subject"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await db.add_schedule_item(group_code, weekday, time, subject)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        students_count = await send_schedule_notification(
            message.bot, group_code, "add", weekday, time, subject
        )
        
        keyboard = get_teacher_keyboard()
        await message.answer(
            SCHEDULE_MESSAGES["lesson_added"].format(
                group_code=group_code,
                students_count=students_count
            ),
            reply_markup=keyboard
        )
        await state.finish()
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await message.answer(
            "–†–∞—Å—Ç–∞—É –Ω–µ–º–µ—Å–µ –±–æ–ª–¥—ã—Ä–º–∞—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑:",
            reply_markup=get_confirm_keyboard()
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ schedule.py")
    
    dp.register_message_handler(cmd_schedule, commands=["schedule"], state="*")
    dp.register_message_handler(process_schedule_action, state=ScheduleStates.waiting_for_action)
    dp.register_message_handler(process_select_group, state=ScheduleStates.selecting_group)
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    dp.register_message_handler(process_add_weekday, state=ScheduleStates.add_schedule_weekday)
    dp.register_message_handler(process_add_time, state=ScheduleStates.add_schedule_time)
    dp.register_message_handler(process_add_subject, state=ScheduleStates.add_schedule_subject)
    dp.register_message_handler(process_confirm_add_lesson, state=ScheduleStates.confirm_schedule_change)
    
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ schedule.py –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
