# bot.py
import logging
import asyncio
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand
from aiogram.dispatcher import FSMContext

from config import BOT_TOKEN, DATABASE_PATH
from database.db import db
from modules import registration, schedule, grades, notifications, attendance
from modules.keyboards import BUTTON_COMMANDS
from localization.kz_text import MESSAGES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def setup_bot():
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
    registration.register_handlers(dp)
    schedule.register_handlers(dp)
    grades.register_handlers(dp)
    notifications.register_handlers(dp)
    attendance.register_handlers(dp)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    @dp.message_handler(lambda message: message.text == "üìä –°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ", state="*")
    async def schedule_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /schedule
        current_state = dp.current_state(user=message.from_user.id)
        await schedule.cmd_schedule(message, current_state)
    
    @dp.message_handler(lambda message: message.text == "üìù –ë–∞“ì–∞–ª–∞—Ä" or message.text == "üìù –ë–∞“ì–∞ “õ–æ—é", state="*")
    async def grades_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /grades
        current_state = dp.current_state(user=message.from_user.id)
        await grades.cmd_grades(message, current_state)
    
    @dp.message_handler(lambda message: message.text == "üîî –•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä", state="*")
    async def notifications_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /notifications
        await notifications.cmd_notifications(message)
    
    @dp.message_handler(lambda message: message.text == "üì∏ –ë–µ–ª–≥—ñ–ª–µ—É", state="*")
    async def checkin_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /checkin
        try:
            from modules.attendance import cmd_checkin
            current_state = dp.current_state(user=message.from_user.id)
            await cmd_checkin(message, current_state)
        except (ImportError, AttributeError):
            await message.answer("“ö–∞—Ç—ã—Å—É–¥—ã –±–µ–ª–≥—ñ–ª–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑.")
    
    @dp.message_handler(lambda message: message.text == "üìã ”®—Ç—ñ–Ω—ñ—à—Ç–µ—Ä", state="*")
    async def requests_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /requests
        try:
            from modules.registration import cmd_requests
            current_state = dp.current_state(user=message.from_user.id)
            await cmd_requests(message, current_state)
        except (ImportError, AttributeError):
            await message.answer("”®—Ç—ñ–Ω—ñ—à—Ç–µ—Ä–¥—ñ “õ–∞—Ä–∞—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑.")
    
    @dp.message_handler(lambda message: message.text == "üë• –¢–æ–ø—Ç–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É", state="*")
    async def manage_groups_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /manage_groups
        try:
            from modules.registration import cmd_manage_groups
            current_state = dp.current_state(user=message.from_user.id)
            await cmd_manage_groups(message, current_state)
        except (ImportError, AttributeError):
            await message.answer("–¢–æ–ø—Ç–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑.")
    
    @dp.message_handler(lambda message: message.text == "üîÑ QR-–∫–æ–¥ –∂–∞—Å–∞—É", state="*")
    async def qr_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /qr
        try:
            from modules.attendance import cmd_qr
            current_state = dp.current_state(user=message.from_user.id)
            await cmd_qr(message, current_state)
        except (ImportError, AttributeError):
            await message.answer("QR-–∫–æ–¥ –∂–∞—Å–∞—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑.")
    
    @dp.message_handler(lambda message: message.text == "üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©—à—ñ—Ä—É", state="*")
    async def delete_profile_button_handler(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /delete_profile
        try:
            from modules.registration import cmd_delete_profile
            current_state = dp.current_state(user=message.from_user.id)
            await cmd_delete_profile(message, current_state)
        except (ImportError, AttributeError):
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©—à—ñ—Ä—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message_handler(state="*")
    async def unknown_message(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        current_state_name = await state.get_state()
        if current_state_name:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state_name}: {message.text}")
            await state.finish()
        await message.answer(MESSAGES["unknown_command"])
    
    return bot, dp

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_commands(bot):
    commands = [
        BotCommand(command="/start", description="–ë–æ—Ç–ø–µ–Ω –∂“±–º—ã—Å—Ç—ã –±–∞—Å—Ç–∞—É"),
        BotCommand(command="/schedule", description="–°–∞–±–∞“õ –∫–µ—Å—Ç–µ—Å—ñ"),
        BotCommand(command="/grades", description="–ú–µ–Ω—ñ“£ –±–∞“ì–∞–ª–∞—Ä—ã–º"),
        BotCommand(command="/notifications", description="–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä"),
        BotCommand(command="/requests", description="–¢—ñ—Ä–∫–µ—É–≥–µ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä (–æ“õ—ã—Ç—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω)"),
        BotCommand(command="/manage_groups", description="–¢–æ–ø—Ç–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É (–æ“õ—ã—Ç—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω)"),
        BotCommand(command="/qr", description="“ö–∞—Ç—ã—Å—É–¥—ã –±–µ–ª–≥—ñ–ª–µ—É “Ø—à—ñ–Ω QR-–∫–æ–¥ –∂–∞—Å–∞—É (–æ“õ—ã—Ç—É—à—ã–ª–∞—Ä “Ø—à—ñ–Ω)"),
        BotCommand(command="/delete_profile", description="–ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©—à—ñ—Ä—É (—Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—à—ñ–Ω)")
    ]
    await bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_startup(dispatcher):
    # –°–±—Ä–æ—Å webhook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await dispatcher.bot.delete_webhook(drop_pending_updates=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.init()
        logger.info("–î–µ—Ä–µ–∫“õ–æ—Ä —Å”ô—Ç—Ç—ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞–Ω–¥—ã")
    except Exception as e:
        logger.error(f"–î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É–¥–∞ “õ–∞—Ç–µ: {e}")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    bot = dispatcher.bot
    await set_commands(bot)
    logger.info("–ë–æ—Ç —Å”ô—Ç—Ç—ñ —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--generate-fake-data":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("–¢–µ—Å—Ç—ñ–ª—ñ–∫ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É –±–∞—Å—Ç–∞–ª–¥—ã...")
        from modules.fake_data import run_fake_data_generation
        asyncio.run(run_fake_data_generation())
        logger.info("–¢–µ—Å—Ç—ñ–ª—ñ–∫ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É –∫–æ–º–∞–Ω–¥–∞—Å—ã –∞—è“õ—Ç–∞–ª–¥—ã")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot, dp = setup_bot()
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
