import logging
import asyncio
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand

from config import BOT_TOKEN, DATABASE_PATH
from database.db import db
from modules import registration, schedule, grades, notifications, attendance
from modules.keyboards import BUTTON_COMMANDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def setup_bot():
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
    registration.register_handlers(dp)
    schedule.register_handlers(dp)
    grades.register_handlers(dp)
    notifications.register_handlers(dp)
    attendance.register_handlers(dp)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    @dp.message_handler(lambda message: message.text == "üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    async def schedule_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /schedule
        state = dp.current_state(user=message.from_user.id)
        await schedule.cmd_schedule(message, state)
    
    @dp.message_handler(lambda message: message.text == "üìù –û—Ü–µ–Ω–∫–∏" or message.text == "üìù –í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏")
    async def grades_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /grades
        state = dp.current_state(user=message.from_user.id)
        await grades.cmd_grades(message, state)
    
    @dp.message_handler(lambda message: message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    async def notifications_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /notifications
        await notifications.cmd_notifications(message)
    
    @dp.message_handler(lambda message: message.text == "üì∏ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è")
    async def checkin_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /checkin
        try:
            from modules.attendance import cmd_checkin
            state = dp.current_state(user=message.from_user.id)
            await cmd_checkin(message, state)
        except (ImportError, AttributeError):
            await message.answer("–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    @dp.message_handler(lambda message: message.text == "üìã –ó–∞—è–≤–∫–∏")
    async def requests_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /requests
        try:
            from modules.registration import cmd_requests
            state = dp.current_state(user=message.from_user.id)
            await cmd_requests(message, state)
        except (ImportError, AttributeError):
            await message.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    @dp.message_handler(lambda message: message.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
    async def manage_groups_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /manage_groups
        try:
            from modules.registration import cmd_manage_groups
            state = dp.current_state(user=message.from_user.id)
            await cmd_manage_groups(message, state)
        except (ImportError, AttributeError):
            await message.answer("–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    @dp.message_handler(lambda message: message.text == "üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥")
    async def qr_button_handler(message: types.Message):
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /qr
        try:
            from modules.attendance import cmd_qr
            state = dp.current_state(user=message.from_user.id)
            await cmd_qr(message, state)
        except (ImportError, AttributeError):
            await message.answer("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @dp.message_handler()
    async def unknown_message(message: types.Message):
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."
        )
    
    return bot, dp

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_commands(bot):
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="/schedule", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"),
        BotCommand(command="/grades", description="–ú–æ–∏ –æ—Ü–µ–Ω–∫–∏"),
        BotCommand(command="/notifications", description="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="/requests", description="–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"),
        BotCommand(command="/manage_groups", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"),
        BotCommand(command="/qr", description="–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)")
    ]
    await bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def on_startup(dispatcher):
    # –°–±—Ä–æ—Å webhook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await dispatcher.bot.delete_webhook(drop_pending_updates=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.init()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    bot = dispatcher.bot
    await set_commands(bot)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--generate-fake-data":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        from modules.fake_data import run_fake_data_generation
        asyncio.run(run_fake_data_generation())
        logger.info("–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot, dp = setup_bot()
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True) 